return {
    --     {
    --         "L3MON4D3/LuaSnip",
    --         build = vim.fn.has "win32" == 0
    --             and "echo 'NOTE: jsregexp is optional, so not a big deal if it fails to build\n'; make install_jsregexp"
    --             or nil,
    --         dependencies = { "rafamadriz/friendly-snippets" },
    --         opts = {
    --             history = true,
    --             delete_check_events = "TextChanged",
    --             region_check_events = "CursorMoved",
    --         },
    --         config = require "plugins.configs.luasnip",
    --     },
    --     {
    --         'tzachar/cmp-tabnine',
    --         build = './install.sh',
    --         dependencies = 'hrsh7th/nvim-cmp',
    --     },
    --     {
    --         "hrsh7th/nvim-cmp",
    --         dependencies = {
    --             "saadparwaiz1/cmp_luasnip",
    --             "hrsh7th/cmp-buffer",
    --             "hrsh7th/cmp-path",
    --             "hrsh7th/cmp-nvim-lsp",

    --         },
    --         event = "InsertEnter",
    --         opts = function()
    --             local cmp = require "cmp"
    --             local snip_status_ok, luasnip = pcall(require, "luasnip")
    --             local lspkind_status_ok, lspkind = pcall(require, "lspkind")
    --             local utils = require "utils"
    --             local compare = require('cmp.config.compare')
    --             if not snip_status_ok then return end
    --             local border_opts = {
    --                 border = "rounded",
    --                 winhighlight = "Normal:NormalFloat,FloatBorder:FloatBorder,CursorLine:PmenuSel,Search:None",
    --             }

    --             local function has_words_before()
    --                 local line, col = (unpack or table.unpack)(vim.api.nvim_win_get_cursor(0))
    --                 return col ~= 0 and
    --                     vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match "%s" == nil
    --             end

    --             return {
    --                 -- enabled = function()
    --                 --   -- local dap_prompt = utils.is_available "cmp-dap" -- add interoperability with cmp-dap
    --                 --   --   and vim.tbl_contains(
    --                 --   --     { "dap-repl", "dapui_watches", "dapui_hover" },
    --                 --   --     vim.api.nvim_get_option_value("filetype", { buf = 0 })
    --                 --   --   )
    --                 --   -- if vim.api.nvim_get_option_value("buftype", { buf = 0 }) == "prompt" and not dap_prompt then return false end
    --                 --   return vim.g.cmp_enabled
    --                 -- end,
    --                 preselect = cmp.PreselectMode.None,
    --                 sorting = {
    --                     priority_weight = 2,
    --                     comparators = {
    --                         compare.exact,
    --                         compare.kind,
    --                         compare.recently_used,
    --                         -- require('cmp_tabnine.compare'),
    --                         compare.offset,
    --                         compare.score,
    --                         compare.sort_text,
    --                         compare.length,
    --                         compare.order,
    --                     },
    --                 },
    --                 performance = {
    --                     debounce = 500,
    --                     throttle = 550,
    --                     fetching_timeout = 80,
    --                 },
    --                 formatting = {
    --                     fields = { "abbr", "kind", "menu" },
    --                     -- format = lspkind_status_ok and lspkind.cmp_format(utils.plugin_opts "lspkind.nvim") or nil,
    --                     format = function(entry, vim_item)
    --                         -- if you have lspkind installed, you can use it like
    --                         -- in the following line:
    --                         -- vim_item.menu = lspkind.source_mapping[entry.source.name]

    --                         vim_item.kind = lspkind.symbolic(vim_item.kind, opts)

    --                         if entry.source.name == "cmp_tabnine" then
    --                             vim_item.kind = "ïƒ§"
    --                         end
    --                         local maxwidth = 80
    --                         vim_item.abbr = string.sub(vim_item.abbr, 1, maxwidth)
    --                         return vim_item
    --                     end,
    --                 },
    --                 snippet = {
    --                     expand = function(args) luasnip.lsp_expand(args.body) end,
    --                 },
    --                 duplicates = {
    --                     nvim_lsp = 1,
    --                     luasnip = 1,
    --                     cmp_tabnine = 1,
    --                     buffer = 1,
    --                     path = 1,
    --                     tabnine = 1,
    --                 },
    --                 confirm_opts = {
    --                     behavior = cmp.ConfirmBehavior.Replace,
    --                     select = true,
    --                 },
    --                 window = {
    --                     completion = cmp.config.window.bordered(border_opts),
    --                     documentation = cmp.config.window.bordered(border_opts),
    --                 },

    --                 mapping = {
    --                     ["<Up>"] = cmp.mapping.select_prev_item { behavior = cmp.SelectBehavior.Select },
    --                     ["<Down>"] = cmp.mapping.select_next_item { behavior = cmp.SelectBehavior.Select },
    --                     ["<C-p>"] = cmp.mapping.select_prev_item { behavior = cmp.SelectBehavior.Insert },
    --                     ["<C-n>"] = cmp.mapping.select_next_item { behavior = cmp.SelectBehavior.Insert },
    --                     ["<C-k>"] = cmp.mapping.select_prev_item { behavior = cmp.SelectBehavior.Insert },
    --                     ["<C-j>"] = cmp.mapping.select_next_item { behavior = cmp.SelectBehavior.Insert },
    --                     ["<C-u>"] = cmp.mapping(cmp.mapping.scroll_docs(-4), { "i", "c" }),
    --                     ["<C-d>"] = cmp.mapping(cmp.mapping.scroll_docs(4), { "i", "c" }),
    --                     ["<C-Space>"] = cmp.mapping(cmp.mapping.complete(), { "i", "c" }),
    --                     ["<C-y>"] = cmp.config.disable,
    --                     ["<C-e>"] = cmp.mapping { i = cmp.mapping.abort(), c = cmp.mapping.close() },
    --                     ["<CR>"] = cmp.mapping.confirm { select = false },
    --                     ["<Tab>"] = cmp.mapping(function(fallback)
    --                         if cmp.visible() then
    --                             cmp.select_next_item()
    --                         elseif luasnip.expand_or_jumpable() then
    --                             luasnip.expand_or_jump()
    --                         elseif has_words_before() then
    --                             cmp.complete()
    --                         else
    --                             fallback()
    --                         end
    --                     end, { "i", "s" }),
    --                     ["<S-Tab>"] = cmp.mapping(function(fallback)
    --                         if cmp.visible() then
    --                             cmp.select_prev_item()
    --                         elseif luasnip.jumpable(-1) then
    --                             luasnip.jump(-1)
    --                         else
    --                             fallback()
    --                         end
    --                     end, { "i", "s" }),
    --                 },
    --                 sources = cmp.config.sources {
    --                     { name = "nvim_lsp",    priority = 1250, keyword_length = 2 },
    --                     { name = 'cmp_tabnine', priority = 0,    keyword_length = 4 },
    --                     { name = "luasnip",     priority = 750,  keyword_length = 3 },
    --                     { name = "buffer",      priority = 500,  keyword_length = 4 },
    --                     { name = "path",        priority = 250,  keyword_length = 4 },
    --                 },
    --             }
    --         end,
    --     },
}
